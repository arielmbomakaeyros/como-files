(x) Schema 1: MappingTSOdata_IntermediateResultsPerHour_fixed.json

(x) Generate test data based on this schema

(x) Logic 1: PTDF values between and 0 and 1 (3 decimal places after comma) like 0.256 or 0.782

(x) Logic 2: PSDF values can be any real number (positiv)

(x) Logic 3: total cost of oras can be the sum of cost oras 

    * MappingTSOdata
    * ptdf values between and 0 and 1 (3 decimal)
    * psdf values not necessary   
    * total cost of oras can be the sum of cost oras

(x) Logic 4: psdfData pstId must be in pstData
    
    * We must find all psdfData pstId inside pstData (only the same pstId the other properties of objects in pstData are specific to pstData objects)
    * pstData number of object must be same number of objects in psdfData

(x) Logic 5: ptdfData raId must be in raData

    * We must find all ptdfData raId inside raData (only the same raId the other properties of objects in raData are specific to raData objects)
    * raData number of object must be same number of objects in ptdfData

(x) Logic 6: psdfData and ptdfData convertedXnecId must find themselves in xnecData
    
    * We must find all psdfData convertedXnecId inside xnecData (only the same convertedXnecId the other properties of objects in xnecData are specific to xnecData objects)
    * We must find all ptdfData convertedXnecId inside xnecData (only the same convertedXnecId the other properties of objects in xnecData are specific to xnecData objects)
    * xnecData number of object must be the sum of objects in psdfData + ptdfData

(x) Logic 7: total cost of Psts can be the sum of costs pst 

(x) Start with MappingTSOdata_IntermediateResultsPerHour_fixed.json


build a function that will generate a spcific aura string for the raId property
Integrating this functionality in the ptdf module data generation
Build a function that will use the generated ptdf data to generate ra data and add up cumulative ra cost
Construct a function for generating psdf data 
Building the generate_random_objects_and_cumulative_pst_cost function that will generate data for pst.
Integrating Calculation of cumulative PST cost in generate_random_objects_and_cumulative_pst_cost function
Integrating the result of the psdf data in generate_random_objects_and_cumulative_pst_cost to base all calculation on psdf

Implementing rules in xnec: making biddingZoneCode be EIC code for biddingzone
Implementing rules in xnec: making tsoCode generate based on TSO EIC code 
Making sure in xnec, fBefore should be higher than fMax and fAfter lower than fMax
Making sure assessedElementMrid is the same as xneMrid and that assessedElementName is same as xneName

Adjusting the algorithme so that if there is a originalXnec2 object generated, it should have a couple of properties same as originalXnec1



